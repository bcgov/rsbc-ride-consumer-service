# Kafka general parameters
kafka.bootstrap.servers=${KAFKA_SERVER}
kafka.security.protocol=${KAFKA_SEC_PROTOCOL}
kafka.sasl.mechanism=${KAFKA_SASL_MECH}
kafka.sasl.jaas.config=${KAFKA_SASL_CONFIG};
kafka.schema.registry.url=${KAFKA_SCHEMA_REGISTRY}

# For compatibility with Confluent kind of schema
mp.messaging.connector.smallrye-kafka.schema.registry.url=${KAFKA_CONFLUENT_COMPAT_REGISTRY}

# Configuring Test event channel
mp.messaging.incoming.incoming-testevent.connector=smallrye-kafka
mp.messaging.incoming.incoming-testevent.commit-strategy=throttled
mp.messaging.incoming.incoming-testevent.topic=${TEST_EVENT_TOPIC}
mp.messaging.incoming.incoming-testevent.key.deserializer=org.apache.kafka.common.serialization.LongDeserializer
mp.messaging.incoming.incoming-testevent.value.deserializer=io.confluent.kafka.serializers.KafkaAvroDeserializer
mp.messaging.connector.smallrye-kafka.apicurio.registry.url=${KAFKA_CONFLUENT_COMPAT_REGISTRY}
mp.messaging.incoming.incoming-testevent.ssl.protocol=${SSL_PROTOCOL}
mp.messaging.incoming.incoming-testevent.ssl.truststore.location=${SSL_TRUSTSTORE}
mp.messaging.incoming.incoming-testevent.ssl.truststore.password=${SSL_TRUSTTORE_PASS}
mp.messaging.incoming.incoming-testevent.ssl.truststore.type=${SSL_TRUSTTORE_TYPE}
mp.messaging.incoming.incoming-testevent.specific.avro.reader=true
mp.messaging.incoming.incoming-testevent.enable.auto.commit=false
mp.messaging.incoming.incoming-testevent.group.id=consumerGroup1
mp.messaging.incoming.incoming-testevent.partitions=1
mp.messaging.incoming.incoming-testevent.auto.offset.reset=latest

# Configuring outgoing Test event channel
mp.messaging.outgoing.outgoing-testevent.connector=smallrye-kafka
mp.messaging.outgoing.outgoing-testevent.topic=${TEST_EVENT_SINK_TOPIC}
mp.messaging.outgoing.outgoing-testevent.value.serializer=org.apache.kafka.common.serialization.StringSerializer
mp.messaging.outgoing.outgoing-testevent.key.serializer=org.apache.kafka.common.serialization.StringSerializer
mp.messaging.outgoing.outgoing-testevent.ssl.protocol=${SSL_PROTOCOL}
mp.messaging.outgoing.outgoing-testevent.ssl.truststore.location=${SSL_TRUSTSTORE}
mp.messaging.outgoing.outgoing-testevent.ssl.truststore.password=${SSL_TRUSTTORE_PASS}
mp.messaging.outgoing.outgoing-testevent.ssl.truststore.type=${SSL_TRUSTTORE_TYPE}

# Configuring incoming app_accepted event channel
mp.messaging.incoming.incoming-appaccepted.connector=smallrye-kafka
mp.messaging.incoming.incoming-appaccepted.commit-strategy=throttled
mp.messaging.incoming.incoming-appaccepted.topic=${APP_ACCEPTED_EVENT_TOPIC}
mp.messaging.incoming.incoming-appaccepted.key.deserializer=org.apache.kafka.common.serialization.LongDeserializer
mp.messaging.incoming.incoming-appaccepted.value.deserializer=io.confluent.kafka.serializers.KafkaAvroDeserializer
mp.messaging.connector.smallrye-appaccepted.apicurio.registry.url=${KAFKA_CONFLUENT_COMPAT_REGISTRY}
mp.messaging.incoming.incoming-appaccepted.ssl.protocol=${SSL_PROTOCOL}
mp.messaging.incoming.incoming-appaccepted.ssl.truststore.location=${SSL_TRUSTSTORE}
mp.messaging.incoming.incoming-appaccepted.ssl.truststore.password=${SSL_TRUSTTORE_PASS}
mp.messaging.incoming.incoming-appaccepted.ssl.truststore.type=${SSL_TRUSTTORE_TYPE}
mp.messaging.incoming.incoming-appaccepted.specific.avro.reader=true
mp.messaging.incoming.incoming-appaccepted.enable.auto.commit=false
mp.messaging.incoming.incoming-appaccepted.group.id=dfappacceptedGrp
mp.messaging.incoming.incoming-appaccepted.partitions=10
mp.messaging.incoming.incoming-appaccepted.auto.offset.reset=latest

# Configuring outgoing app_accepted decoded event channel
mp.messaging.outgoing.outgoing-app_accepted_decoded.connector=smallrye-kafka
mp.messaging.outgoing.outgoing-app_accepted_decoded.topic=${APP_ACCEPTED_EVENT_DECODED_TOPIC}
mp.messaging.outgoing.outgoing-app_accepted_decoded.value.serializer=org.apache.kafka.common.serialization.StringSerializer
mp.messaging.outgoing.outgoing-app_accepted_decoded.key.serializer=org.apache.kafka.common.serialization.StringSerializer
mp.messaging.outgoing.outgoing-app_accepted_decoded.ssl.protocol=${SSL_PROTOCOL}
mp.messaging.outgoing.outgoing-app_accepted_decoded.ssl.truststore.location=${SSL_TRUSTSTORE}
mp.messaging.outgoing.outgoing-app_accepted_decoded.ssl.truststore.password=${SSL_TRUSTTORE_PASS}
mp.messaging.outgoing.outgoing-app_accepted_decoded.ssl.truststore.type=${SSL_TRUSTTORE_TYPE}

# Configuring incoming disclosure_sent event channel
mp.messaging.incoming.incoming-disclosuresent.connector=smallrye-kafka
mp.messaging.incoming.incoming-disclosuresent.commit-strategy=throttled
mp.messaging.incoming.incoming-disclosuresent.topic=${DISCLOSURE_EVENT_TOPIC}
mp.messaging.incoming.incoming-disclosuresent.key.deserializer=org.apache.kafka.common.serialization.LongDeserializer
mp.messaging.incoming.incoming-disclosuresent.value.deserializer=io.confluent.kafka.serializers.KafkaAvroDeserializer
mp.messaging.connector.smallrye-disclosuresent.apicurio.registry.url=${KAFKA_CONFLUENT_COMPAT_REGISTRY}
mp.messaging.incoming.incoming-disclosuresent.ssl.protocol=${SSL_PROTOCOL}
mp.messaging.incoming.incoming-disclosuresent.ssl.truststore.location=${SSL_TRUSTSTORE}
mp.messaging.incoming.incoming-disclosuresent.ssl.truststore.password=${SSL_TRUSTTORE_PASS}
mp.messaging.incoming.incoming-disclosuresent.ssl.truststore.type=${SSL_TRUSTTORE_TYPE}
mp.messaging.incoming.incoming-disclosuresent.specific.avro.reader=true
mp.messaging.incoming.incoming-disclosuresent.enable.auto.commit=false
mp.messaging.incoming.incoming-disclosuresent.group.id=dfdisclosuresentGrp
mp.messaging.incoming.incoming-disclosuresent.partitions=10
mp.messaging.incoming.incoming-disclosuresent.auto.offset.reset=latest

# Configuring outgoing disclosure_sent decoded event channel
mp.messaging.outgoing.outgoing-disclosure_sent_decoded.connector=smallrye-kafka
mp.messaging.outgoing.outgoing-disclosure_sent_decoded.topic=${DISCLOSURE_EVENT_DECODED_TOPIC}
mp.messaging.outgoing.outgoing-disclosure_sent_decoded.value.serializer=org.apache.kafka.common.serialization.StringSerializer
mp.messaging.outgoing.outgoing-disclosure_sent_decoded.key.serializer=org.apache.kafka.common.serialization.StringSerializer
mp.messaging.outgoing.outgoing-disclosure_sent_decoded.ssl.protocol=${SSL_PROTOCOL}
mp.messaging.outgoing.outgoing-disclosure_sent_decoded.ssl.truststore.location=${SSL_TRUSTSTORE}
mp.messaging.outgoing.outgoing-disclosure_sent_decoded.ssl.truststore.password=${SSL_TRUSTTORE_PASS}
mp.messaging.outgoing.outgoing-disclosure_sent_decoded.ssl.truststore.type=${SSL_TRUSTTORE_TYPE}

# Configuring incoming evidence_submitted event channel
mp.messaging.incoming.incoming-evidencesubmit.connector=smallrye-kafka
mp.messaging.incoming.incoming-evidencesubmit.commit-strategy=throttled
mp.messaging.incoming.incoming-evidencesubmit.topic=${EVSUBMITTED_EVENT_TOPIC}
mp.messaging.incoming.incoming-evidencesubmit.key.deserializer=org.apache.kafka.common.serialization.LongDeserializer
mp.messaging.incoming.incoming-evidencesubmit.value.deserializer=io.confluent.kafka.serializers.KafkaAvroDeserializer
mp.messaging.connector.smallrye-evidencesubmit.apicurio.registry.url=${KAFKA_CONFLUENT_COMPAT_REGISTRY}
mp.messaging.incoming.incoming-evidencesubmit.ssl.protocol=${SSL_PROTOCOL}
mp.messaging.incoming.incoming-evidencesubmit.ssl.truststore.location=${SSL_TRUSTSTORE}
mp.messaging.incoming.incoming-evidencesubmit.ssl.truststore.password=${SSL_TRUSTTORE_PASS}
mp.messaging.incoming.incoming-evidencesubmit.ssl.truststore.type=${SSL_TRUSTTORE_TYPE}
mp.messaging.incoming.incoming-evidencesubmit.specific.avro.reader=true
mp.messaging.incoming.incoming-evidencesubmit.enable.auto.commit=false
mp.messaging.incoming.incoming-evidencesubmit.group.id=dfevusbmittedGrp
mp.messaging.incoming.incoming-evidencesubmit.partitions=10
mp.messaging.incoming.incoming-evidencesubmit.auto.offset.reset=latest

# Configuring outgoing evidence_submitted decoded event channel
mp.messaging.outgoing.outgoing-evidence_submitted_decoded.connector=smallrye-kafka
mp.messaging.outgoing.outgoing-evidence_submitted_decoded.topic=${EVSUBMITTED_EVENT_DECODED_TOPIC}
mp.messaging.outgoing.outgoing-evidence_submitted_decoded.value.serializer=org.apache.kafka.common.serialization.StringSerializer
mp.messaging.outgoing.outgoing-evidence_submitted_decoded.key.serializer=org.apache.kafka.common.serialization.StringSerializer
mp.messaging.outgoing.outgoing-evidence_submitted_decoded.ssl.protocol=${SSL_PROTOCOL}
mp.messaging.outgoing.outgoing-evidence_submitted_decoded.ssl.truststore.location=${SSL_TRUSTSTORE}
mp.messaging.outgoing.outgoing-evidence_submitted_decoded.ssl.truststore.password=${SSL_TRUSTTORE_PASS}
mp.messaging.outgoing.outgoing-evidence_submitted_decoded.ssl.truststore.type=${SSL_TRUSTTORE_TYPE}

# Configuring incoming payment_received event channel
mp.messaging.incoming.incoming-payreceived.connector=smallrye-kafka
mp.messaging.incoming.incoming-payreceived.commit-strategy=throttled
mp.messaging.incoming.incoming-payreceived.topic=${PAYRECVD_EVENT_TOPIC}
mp.messaging.incoming.incoming-payreceived.key.deserializer=org.apache.kafka.common.serialization.LongDeserializer
mp.messaging.incoming.incoming-payreceived.value.deserializer=io.confluent.kafka.serializers.KafkaAvroDeserializer
mp.messaging.connector.smallrye-payreceived.apicurio.registry.url=${KAFKA_CONFLUENT_COMPAT_REGISTRY}
mp.messaging.incoming.incoming-payreceived.ssl.protocol=${SSL_PROTOCOL}
mp.messaging.incoming.incoming-payreceived.ssl.truststore.location=${SSL_TRUSTSTORE}
mp.messaging.incoming.incoming-payreceived.ssl.truststore.password=${SSL_TRUSTTORE_PASS}
mp.messaging.incoming.incoming-payreceived.ssl.truststore.type=${SSL_TRUSTTORE_TYPE}
mp.messaging.incoming.incoming-payreceived.specific.avro.reader=true
mp.messaging.incoming.incoming-payreceived.enable.auto.commit=false
mp.messaging.incoming.incoming-payreceived.group.id=dfpayrecvdGrp
mp.messaging.incoming.incoming-payreceived.partitions=10
mp.messaging.incoming.incoming-payreceived.auto.offset.reset=latest

# Configuring outgoing payment_received decoded event channel
mp.messaging.outgoing.outgoing-payment_received_decoded.connector=smallrye-kafka
mp.messaging.outgoing.outgoing-payment_received_decoded.topic=${PAYRECVD_EVENT_DECODED_TOPIC}
mp.messaging.outgoing.outgoing-payment_received_decoded.value.serializer=org.apache.kafka.common.serialization.StringSerializer
mp.messaging.outgoing.outgoing-payment_received_decoded.key.serializer=org.apache.kafka.common.serialization.StringSerializer
mp.messaging.outgoing.outgoing-payment_received_decoded.ssl.protocol=${SSL_PROTOCOL}
mp.messaging.outgoing.outgoing-payment_received_decoded.ssl.truststore.location=${SSL_TRUSTSTORE}
mp.messaging.outgoing.outgoing-payment_received_decoded.ssl.truststore.password=${SSL_TRUSTTORE_PASS}
mp.messaging.outgoing.outgoing-payment_received_decoded.ssl.truststore.type=${SSL_TRUSTTORE_TYPE}

# Configuring incoming review_scheduled event channel
mp.messaging.incoming.incoming-reviewscheduled.connector=smallrye-kafka
mp.messaging.incoming.incoming-reviewscheduled.commit-strategy=throttled
mp.messaging.incoming.incoming-reviewscheduled.topic=${REVSCHED_EVENT_TOPIC}
mp.messaging.incoming.incoming-reviewscheduled.key.deserializer=org.apache.kafka.common.serialization.LongDeserializer
mp.messaging.incoming.incoming-reviewscheduled.value.deserializer=io.confluent.kafka.serializers.KafkaAvroDeserializer
mp.messaging.connector.smallrye-reviewscheduled.apicurio.registry.url=${KAFKA_CONFLUENT_COMPAT_REGISTRY}
mp.messaging.incoming.incoming-reviewscheduled.ssl.protocol=${SSL_PROTOCOL}
mp.messaging.incoming.incoming-reviewscheduled.ssl.truststore.location=${SSL_TRUSTSTORE}
mp.messaging.incoming.incoming-reviewscheduled.ssl.truststore.password=${SSL_TRUSTTORE_PASS}
mp.messaging.incoming.incoming-reviewscheduled.ssl.truststore.type=${SSL_TRUSTTORE_TYPE}
mp.messaging.incoming.incoming-reviewscheduled.specific.avro.reader=true
mp.messaging.incoming.incoming-reviewscheduled.enable.auto.commit=false
mp.messaging.incoming.incoming-reviewscheduled.group.id=dfrevschedGrp
mp.messaging.incoming.incoming-reviewscheduled.partitions=10
mp.messaging.incoming.incoming-reviewscheduled.auto.offset.reset=latest

# Configuring outgoing review_scheduled decoded event channel
mp.messaging.outgoing.outgoing-review_scheduled_decoded.connector=smallrye-kafka
mp.messaging.outgoing.outgoing-review_scheduled_decoded.topic=${REVSCHED_EVENT_DECODED_TOPIC}
mp.messaging.outgoing.outgoing-review_scheduled_decoded.value.serializer=org.apache.kafka.common.serialization.StringSerializer
mp.messaging.outgoing.outgoing-review_scheduled_decoded.key.serializer=org.apache.kafka.common.serialization.StringSerializer
mp.messaging.outgoing.outgoing-review_scheduled_decoded.ssl.protocol=${SSL_PROTOCOL}
mp.messaging.outgoing.outgoing-review_scheduled_decoded.ssl.truststore.location=${SSL_TRUSTSTORE}
mp.messaging.outgoing.outgoing-review_scheduled_decoded.ssl.truststore.password=${SSL_TRUSTTORE_PASS}
mp.messaging.outgoing.outgoing-review_scheduled_decoded.ssl.truststore.type=${SSL_TRUSTTORE_TYPE}




#-------------------------------------------------------------------etk configuration----------------------------------------------------------------

# Configuring incoming issuance event channel
mp.messaging.incoming.incoming-issuance.connector=smallrye-kafka
mp.messaging.incoming.incoming-issuance.commit-strategy=throttled
mp.messaging.incoming.incoming-issuance.topic=${ISSUANCE_EVENT_TOPIC}
#mp.messaging.incoming.incoming-issuance.key.deserializer=org.apache.kafka.common.serialization.StringDeserializer
mp.messaging.incoming.incoming-issuance.key.deserializer=org.apache.kafka.common.serialization.LongDeserializer
#mp.messaging.incoming.incoming-issuance.value.deserializer=io.confluent.kafka.serializers.json.KafkaJsonSchemaDeserializer
mp.messaging.incoming.incoming-issuance.value.deserializer=org.apache.kafka.common.serialization.StringDeserializer
mp.messaging.connector.smallrye-issuance.apicurio.registry.url=${KAFKA_CONFLUENT_COMPAT_REGISTRY}
mp.messaging.incoming.incoming-issuance.ssl.protocol=${SSL_PROTOCOL}
mp.messaging.incoming.incoming-issuance.ssl.truststore.location=${SSL_TRUSTSTORE}
mp.messaging.incoming.incoming-issuance.ssl.truststore.password=${SSL_TRUSTTORE_PASS}
mp.messaging.incoming.incoming-issuance.ssl.truststore.type=${SSL_TRUSTTORE_TYPE}
mp.messaging.incoming.incoming-issuance.enable.auto.commit=false
mp.messaging.incoming.incoming-issuance.group.id=etkissuanceGrp
mp.messaging.incoming.incoming-issuance.partitions=10
mp.messaging.incoming.incoming-issuance.auto.offset.reset=latest


# Configuring incoming payment event channel
mp.messaging.incoming.incoming-payment.connector=smallrye-kafka
mp.messaging.incoming.incoming-payment.commit-strategy=throttled
mp.messaging.incoming.incoming-payment.topic=${PAYMENT_EVENT_TOPIC}
mp.messaging.incoming.incoming-payment.key.deserializer=org.apache.kafka.common.serialization.LongDeserializer
mp.messaging.incoming.incoming-payment.value.deserializer=org.apache.kafka.common.serialization.StringDeserializer
mp.messaging.connector.smallrye-payment.apicurio.registry.url=${KAFKA_CONFLUENT_COMPAT_REGISTRY}
mp.messaging.incoming.incoming-payment.ssl.protocol=${SSL_PROTOCOL}
mp.messaging.incoming.incoming-payment.ssl.truststore.location=${SSL_TRUSTSTORE}
mp.messaging.incoming.incoming-payment.ssl.truststore.password=${SSL_TRUSTTORE_PASS}
mp.messaging.incoming.incoming-payment.ssl.truststore.type=${SSL_TRUSTTORE_TYPE}
mp.messaging.incoming.incoming-payment.enable.auto.commit=false
mp.messaging.incoming.incoming-payment.group.id=etkpaymentGrp
mp.messaging.incoming.incoming-payment.partitions=10
mp.messaging.incoming.incoming-payment.auto.offset.reset=latest


# Configuring incoming dispute event channel
mp.messaging.incoming.incoming-dispute.connector=smallrye-kafka
mp.messaging.incoming.incoming-dispute.commit-strategy=throttled
mp.messaging.incoming.incoming-dispute.topic=${DISPUTE_EVENT_TOPIC}
mp.messaging.incoming.incoming-dispute.key.deserializer=org.apache.kafka.common.serialization.LongDeserializer
mp.messaging.incoming.incoming-dispute.value.deserializer=org.apache.kafka.common.serialization.StringDeserializer
mp.messaging.connector.smallrye-dispute.apicurio.registry.url=${KAFKA_CONFLUENT_COMPAT_REGISTRY}
mp.messaging.incoming.incoming-dispute.ssl.protocol=${SSL_PROTOCOL}
mp.messaging.incoming.incoming-dispute.ssl.truststore.location=${SSL_TRUSTSTORE}
mp.messaging.incoming.incoming-dispute.ssl.truststore.password=${SSL_TRUSTTORE_PASS}
mp.messaging.incoming.incoming-dispute.ssl.truststore.type=${SSL_TRUSTTORE_TYPE}
mp.messaging.incoming.incoming-dispute.enable.auto.commit=false
mp.messaging.incoming.incoming-dispute.group.id=etkdisputeGrp
mp.messaging.incoming.incoming-dispute.partitions=10
mp.messaging.incoming.incoming-dispute.auto.offset.reset=latest

# Configuring incoming disputeupdate event channel
mp.messaging.incoming.incoming-disputeupdate.connector=smallrye-kafka
mp.messaging.incoming.incoming-disputeupdate.commit-strategy=throttled
mp.messaging.incoming.incoming-disputeupdate.topic=${DISPUTE_UPDATE_EVENT_TOPIC}
mp.messaging.incoming.incoming-disputeupdate.key.deserializer=org.apache.kafka.common.serialization.LongDeserializer
mp.messaging.incoming.incoming-disputeupdate.value.deserializer=org.apache.kafka.common.serialization.StringDeserializer
mp.messaging.connector.smallrye-disputeupdate.apicurio.registry.url=${KAFKA_CONFLUENT_COMPAT_REGISTRY}
mp.messaging.incoming.incoming-disputeupdate.ssl.protocol=${SSL_PROTOCOL}
mp.messaging.incoming.incoming-disputeupdate.ssl.truststore.location=${SSL_TRUSTSTORE}
mp.messaging.incoming.incoming-disputeupdate.ssl.truststore.password=${SSL_TRUSTTORE_PASS}
mp.messaging.incoming.incoming-disputeupdate.ssl.truststore.type=${SSL_TRUSTTORE_TYPE}
mp.messaging.incoming.incoming-disputeupdate.enable.auto.commit=false
mp.messaging.incoming.incoming-disputeupdate.group.id=etkdisputeupdateGrp
mp.messaging.incoming.incoming-disputeupdate.partitions=10
mp.messaging.incoming.incoming-disputeupdate.auto.offset.reset=latest

# Configuring incoming violations event channel
mp.messaging.incoming.incoming-violations.connector=smallrye-kafka
mp.messaging.incoming.incoming-violations.commit-strategy=throttled
mp.messaging.incoming.incoming-violations.topic=${VIOLATIONS_EVENT_TOPIC}
mp.messaging.incoming.incoming-violations.key.deserializer=org.apache.kafka.common.serialization.LongDeserializer
mp.messaging.incoming.incoming-violations.value.deserializer=org.apache.kafka.common.serialization.StringDeserializer
mp.messaging.connector.smallrye-violations.apicurio.registry.url=${KAFKA_CONFLUENT_COMPAT_REGISTRY}
mp.messaging.incoming.incoming-violations.ssl.protocol=${SSL_PROTOCOL}
mp.messaging.incoming.incoming-violations.ssl.truststore.location=${SSL_TRUSTSTORE}
mp.messaging.incoming.incoming-violations.ssl.truststore.password=${SSL_TRUSTTORE_PASS}
mp.messaging.incoming.incoming-violations.ssl.truststore.type=${SSL_TRUSTTORE_TYPE}
mp.messaging.incoming.incoming-violations.enable.auto.commit=false
mp.messaging.incoming.incoming-violations.group.id=etkviolationsGrp
mp.messaging.incoming.incoming-violations.partitions=10
mp.messaging.incoming.incoming-violations.auto.offset.reset=latest

# Configuring incoming payment query event channel
mp.messaging.incoming.incoming-payquery.connector=smallrye-kafka
mp.messaging.incoming.incoming-payquery.commit-strategy=throttled
mp.messaging.incoming.incoming-payquery.topic=${PAYQUERY_EVENT_TOPIC}
mp.messaging.incoming.incoming-payquery.key.deserializer=org.apache.kafka.common.serialization.LongDeserializer
mp.messaging.incoming.incoming-payquery.value.deserializer=org.apache.kafka.common.serialization.StringDeserializer
mp.messaging.connector.smallrye-payquery.apicurio.registry.url=${KAFKA_CONFLUENT_COMPAT_REGISTRY}
mp.messaging.incoming.incoming-payquery.ssl.protocol=${SSL_PROTOCOL}
mp.messaging.incoming.incoming-payquery.ssl.truststore.location=${SSL_TRUSTSTORE}
mp.messaging.incoming.incoming-payquery.ssl.truststore.password=${SSL_TRUSTTORE_PASS}
mp.messaging.incoming.incoming-payquery.ssl.truststore.type=${SSL_TRUSTTORE_TYPE}
mp.messaging.incoming.incoming-payquery.enable.auto.commit=false
mp.messaging.incoming.incoming-payquery.group.id=etkpayqueryGrp
mp.messaging.incoming.incoming-payquery.partitions=10
mp.messaging.incoming.incoming-payquery.auto.offset.reset=latest

# Geocoder Params
geocoder.security.username=${API_USER_NAME:SSGUser}
geocoder.security.password=${API_USER_PASSWORD:notset}
geocoder.api.port=${GEOCODER_PORT:8585}
geocoder.api.host=${GEOCODER_HOST:localhost}
geocoder.api.uri=${GEOCODER_URI:/geocodersvc/api/v1/address}

# Ride DB Adapter Params
ride.adapter.api.port=${RIDE_DB_ADAPTER_PORT:8082}
ride.adapter.api.host=${RIDE_DB_ADAPTER_HOST:localhost}

# primary keys
ride.adapter.primarykey.payment=${PRIMARY_KEY_PAYMENT}
ride.adapter.primarykey.payquery=${PRIMARY_KEY_PAYQUERY}
ride.adapter.primarykey.violations=${PRIMARY_KEY_VIOLATIONS}
ride.adapter.primarykey.geolocation=${PRIMARY_KEY_GEOLOCATION}
ride.adapter.primarykey.disputeupdate=${PRIMARY_KEY_DISPUTEUPDATE}
ride.adapter.primarykey.issuance=${PRIMARY_KEY_ISSUANCE}
ride.adapter.primarykey.dispute=${PRIMARY_KEY_DISPUTE}

#Recon svc params
ride.reconsvc.api.port=${RECON_PORT:5000}
ride.reconsvc.api.host=${RECON_HOST:localhost}

# Configuring Open-Telemetry
quarkus.application.name=ride-consumer-service
# quarkus.opentelemetry.tracer.exporter.otlp.endpoint=${OTEL_ENDPOINT:http://localhost:5555}
# quarkus.log.console.format=%d{HH:mm:ss} %-5p traceId=%X{traceId}, parentId=%X{parentId}, spanId=%X{spanId}, sampled=%X{sampled} [%c{2.}] (%t) %s%e%n
# quarkus.http.access-log.pattern="...traceId=%{X,traceId} spanId=%{X,spanId}"
# quarkus.micrometer.export.prometheus.enabled=true
#quarkus.http.port=8089
